// List file for {{.Singular}} instances

package list

import (
	"{{.ModName}}/internal/factory"
	"{{.ModName}}/internal/flagutil"
	"github.com/spf13/cobra"
)

type listOptions struct {
	outputFormat string
	page         int32
	limit        int32
	search       string

	// You can add more fields here according to your requirements
}

// GetListCommand returns a new command for listing {{.Singular}} instances.
func GetListCommand(f *factory.Factory) *cobra.Command {
	opts := &listOptions{}

	cmd := &cobra.Command{
		Use:     f.Localizer.LocalizeByID("{{.Singular}}.cmd.list.use"),
		Short:   f.Localizer.LocalizeByID("{{.Singular}}.cmd.list.shortDescription"),
		Long:    f.Localizer.LocalizeByID("{{.Singular}}.cmd.list.longDescription"),
		Example: f.Localizer.LocalizeByID("{{.Singular}}.cmd.list.example"),
		Args:    cobra.NoArgs,
		RunE: func(cmd *cobra.Command, args []string) error {

			if err := performValidation(opts, f); err != nil {
				return err
			}

			return runList(opts, f)
		},
	}

	// Adds local flags
	cmd.Flags().StringVarP(&opts.outputFormat, "output", "o", "", f.Localizer.LocalizeByID("{{.Singular}}.cmd.flag.output.description"))
	cmd.Flags().Int32VarP(&opts.page, "page", "", 1, f.Localizer.LocalizeByID("{{.Singular}}.list.flag.page"))
	cmd.Flags().Int32VarP(&opts.limit, "limit", "", 100, f.Localizer.LocalizeByID("{{.Singular}}.list.flag.limit"))
	cmd.Flags().StringVarP(&opts.search, "search", "", "", f.Localizer.LocalizeByID("{{.Singular}}.list.flag.search"))

	// Enables completion for the `output` flag
	flagutil.EnableStaticFlagCompletion(cmd, "output", flagutil.ValidOutputFormats)

	return cmd
}

// performValidation validates the arguments and flag values of the List command
func performValidation(opts *listOptions, f *factory.Factory) error {

	// Ensures that the value of `output` flag is valid
	if opts.outputFormat != "" && !flagutil.IsValidInput(opts.outputFormat, flagutil.ValidOutputFormats...) {
		return flagutil.InvalidValueError("output", opts.outputFormat, flagutil.ValidOutputFormats...)
	}

	return nil
}
